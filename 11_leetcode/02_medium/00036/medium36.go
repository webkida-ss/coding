package main

import "fmt"

func isValidSudoku(board [][]byte) bool {
	// boolで数値が既に存在するかマトリクスを持つ
	rows := [9][9]bool{}    // 第一インデックス=行インデックス、第二インデックス=数値
	columns := [9][9]bool{} // 第一インデックス=列インデックス、第二インデックス=数値
	boxes := [9][9]bool{}   // 第一インデックス=サブボックスインデックス、第二インデックス=数値

	for i := 0; i < 9; i++ {
		for j := 0; j < 9; j++ {
			if board[i][j] != '.' {

				// 独ボードの特定のセルにある値（バイト型）を整数に変換
				num := board[i][j] - '1'

				// 現在のセルがどの3x3のボックスに属しているかを計算
				boxIndex := (i/3)*3 + j/3

				// 数独のルールに違反しているかどうかをチェック
				if rows[i][num] || columns[j][num] || boxes[boxIndex][num] {
					return false
				}

				// 第二インデックスがnumで有ることに注目
				// 該当の数字が存在すること設定
				rows[i][num] = true
				columns[j][num] = true
				boxes[boxIndex][num] = true
			}
		}
	}

	return true
}

func main() {
	// 、数独ボードが通常、'1'から'9'の数字と'.'（空のセルを表す）からなる文字列として表現されるためintではダメ
	board := [][]byte{
		{'5', '3', '.', '.', '7', '.', '.', '.', '.'},
		{'6', '.', '.', '1', '9', '5', '.', '.', '.'},
		{'.', '9', '8', '.', '.', '.', '.', '6', '.'},
		{'8', '.', '.', '.', '6', '.', '.', '.', '3'},
		{'4', '.', '.', '8', '.', '3', '.', '.', '1'},
		{'7', '.', '.', '.', '2', '.', '.', '.', '6'},
		{'.', '6', '.', '.', '.', '.', '2', '8', '.'},
		{'.', '.', '.', '4', '1', '9', '.', '.', '5'},
		{'.', '.', '.', '.', '8', '.', '.', '7', '9'},
	}

	isValid := isValidSudoku(board)
	fmt.Println(isValid) // Output: true
}
